// Code generated by MockGen. DO NOT EDIT.
// Source: internal/balance/repository.go

// Package mock_balance is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/polyanimal/balance/internal/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AlterFunds mocks base method.
func (m *MockRepository) AlterFunds(id string, funds int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterFunds", id, funds)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterFunds indicates an expected call of AlterFunds.
func (mr *MockRepositoryMockRecorder) AlterFunds(id, funds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterFunds", reflect.TypeOf((*MockRepository)(nil).AlterFunds), id, funds)
}

// GetBalance mocks base method.
func (m *MockRepository) GetBalance(id string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockRepositoryMockRecorder) GetBalance(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockRepository)(nil).GetBalance), id)
}

// GetTransactions mocks base method.
func (m *MockRepository) GetTransactions(userId, order, sort string, page, perPage int) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", userId, order, sort, page, perPage)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockRepositoryMockRecorder) GetTransactions(userId, order, sort, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockRepository)(nil).GetTransactions), userId, order, sort, page, perPage)
}

// RecordTransaction mocks base method.
func (m *MockRepository) RecordTransaction(operation, idFrom, idTo string, funds int, t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordTransaction", operation, idFrom, idTo, funds, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordTransaction indicates an expected call of RecordTransaction.
func (mr *MockRepositoryMockRecorder) RecordTransaction(operation, idFrom, idTo, funds, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTransaction", reflect.TypeOf((*MockRepository)(nil).RecordTransaction), operation, idFrom, idTo, funds, t)
}

// TransferFunds mocks base method.
func (m *MockRepository) TransferFunds(idFrom, idTo string, funds int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferFunds", idFrom, idTo, funds)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferFunds indicates an expected call of TransferFunds.
func (mr *MockRepositoryMockRecorder) TransferFunds(idFrom, idTo, funds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferFunds", reflect.TypeOf((*MockRepository)(nil).TransferFunds), idFrom, idTo, funds)
}
